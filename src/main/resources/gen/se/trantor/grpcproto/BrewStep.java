// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc-service.proto

package se.trantor.grpcproto;

/**
 * Protobuf enum {@code grpcproto.BrewStep}
 */
public enum BrewStep
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>IDLE = 0;</code>
   */
  IDLE(0),
  /**
   * <code>HEATING = 1;</code>
   */
  HEATING(1),
  /**
   * <code>STRIKE_WATER_TEMP_REACHED = 2;</code>
   */
  STRIKE_WATER_TEMP_REACHED(2),
  /**
   * <code>MASHING = 3;</code>
   */
  MASHING(3),
  /**
   * <code>MASH_DONE_START_SPARGE = 4;</code>
   */
  MASH_DONE_START_SPARGE(4),
  /**
   * <code>BOILING = 5;</code>
   */
  BOILING(5),
  /**
   * <code>BOIL_DONE = 6;</code>
   */
  BOIL_DONE(6),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>IDLE = 0;</code>
   */
  public static final int IDLE_VALUE = 0;
  /**
   * <code>HEATING = 1;</code>
   */
  public static final int HEATING_VALUE = 1;
  /**
   * <code>STRIKE_WATER_TEMP_REACHED = 2;</code>
   */
  public static final int STRIKE_WATER_TEMP_REACHED_VALUE = 2;
  /**
   * <code>MASHING = 3;</code>
   */
  public static final int MASHING_VALUE = 3;
  /**
   * <code>MASH_DONE_START_SPARGE = 4;</code>
   */
  public static final int MASH_DONE_START_SPARGE_VALUE = 4;
  /**
   * <code>BOILING = 5;</code>
   */
  public static final int BOILING_VALUE = 5;
  /**
   * <code>BOIL_DONE = 6;</code>
   */
  public static final int BOIL_DONE_VALUE = 6;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static BrewStep valueOf(int value) {
    return forNumber(value);
  }

  public static BrewStep forNumber(int value) {
    switch (value) {
      case 0: return IDLE;
      case 1: return HEATING;
      case 2: return STRIKE_WATER_TEMP_REACHED;
      case 3: return MASHING;
      case 4: return MASH_DONE_START_SPARGE;
      case 5: return BOILING;
      case 6: return BOIL_DONE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<BrewStep>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      BrewStep> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<BrewStep>() {
          public BrewStep findValueByNumber(int number) {
            return BrewStep.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return se.trantor.grpcproto.GrainbrainProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final BrewStep[] VALUES = values();

  public static BrewStep valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private BrewStep(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:grpcproto.BrewStep)
}

